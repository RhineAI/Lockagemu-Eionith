// This file is generated. Do not modify by hand.
// XML documentation file not found. To check if public methods have XML comments,
// make sure the XML doc file is present and located next to the scraped dll
namespace UnityEditor.Splines
{
    [System.AttributeUsage(System.AttributeTargets.Class, Inherited = false)] [System.Obsolete(@"Use SplineDataHandles.DataPointHandles instead and EditorTools to interact with SplineData.", false)] public class CustomSplineDataHandle : System.Attribute
    {
        public CustomSplineDataHandle(System.Type type) {}
    }

    public static class EditorSplineUtility
    {
        [System.Obsolete(@"Use AfterSplineWasModified instead.", false)] public static event System.Action<UnityEngine.Splines.Spline> afterSplineWasModified;
        public static event System.Action<UnityEngine.Splines.Spline> AfterSplineWasModified;
        public static UnityEngine.Splines.TangentMode DefaultTangentMode { get; }
        public static bool CopySplineDataIfEmpty(UnityEngine.Splines.ISplineContainer container, int source, int destination, UnityEngine.Splines.EmbeddedSplineDataType type, string key);
        public static void RegisterSplineDataChanged<T>(System.Action<UnityEngine.Splines.SplineData<T>> action);
        public static void SetKnotPlacementTool();
        public static void UnregisterSplineDataChanged<T>(System.Action<UnityEngine.Splines.SplineData<T>> action);
    }

    [CustomPropertyDrawer(typeof(UnityEngine.Splines.EmbeddedSplineData))] [CustomPropertyDrawer(typeof(UnityEngine.Splines.EmbeddedSplineDataFieldsAttribute))] public class EmbeddedSplineDataPropertyDrawer : PropertyDrawer
    {
        public EmbeddedSplineDataPropertyDrawer() {}
        public override float GetPropertyHeight(SerializedProperty property, UnityEngine.GUIContent label);
        public override void OnGUI(UnityEngine.Rect position, SerializedProperty property, UnityEngine.GUIContent label);
    }

    public static class SerializedPropertyUtility
    {
        public static void ClearPropertyCache();
        public static SerializedProperty GetEmbeddedSplineDataProperty(SerializedProperty splineProperty, UnityEngine.Splines.EmbeddedSplineDataType type, string key);
        public static SerializedProperty GetEmbeddedSplineDataProperty(UnityEngine.Splines.SplineContainer container, int index, UnityEngine.Splines.EmbeddedSplineDataType type, string key);
        public static SerializedObject GetSerializedObject(UnityEngine.Splines.SplineContainer container);
        public static SerializedProperty GetSplineSerializedProperty(SerializedObject splineContainer, int splineIndex);
    }

    [System.Obsolete(@"Use SplineDataHandles.DataPointHandles instead and EditorTools to interact with SplineData.", false)] public abstract class SplineDataHandle<T>
    {
        public UnityEngine.Splines.SplineDataHandleAttribute attribute { get; }
        public int[] controlIDs { get; }
        protected SplineDataHandle() {}
        public virtual void DrawDataPoint(int controlID, UnityEngine.Vector3 position, UnityEngine.Vector3 direction, UnityEngine.Vector3 upDirection, UnityEngine.Splines.SplineData<T> splineData, int dataPointIndex);
        public virtual void DrawSplineData(UnityEngine.Splines.SplineData<T> splineData, UnityEngine.Splines.Spline spline, UnityEngine.Matrix4x4 localToWorld, UnityEngine.Color color);
    }

    public static class SplineDataHandles
    {
        public static void DataPointHandles<TSpline, TData>(this TSpline spline, UnityEngine.Splines.SplineData<TData> splineData, bool useDefaultValueOnAdd = false) where TSpline : UnityEngine.Splines.ISpline;
        public static void DataPointHandles<TSpline, TData>(this TSpline spline, UnityEngine.Splines.SplineData<TData> splineData, bool useDefaultValueOnAdd, int splineID = 0) where TSpline : UnityEngine.Splines.ISpline;
    }

    public static class SplineGizmoUtility
    {
        public static void DrawGizmos(UnityEngine.Splines.ISplineContainer container);
        [System.Obsolete(@"Use the overload that uses ISplineContainer")] public static void DrawGizmos(UnityEngine.Splines.ISplineProvider provider);
    }

    public static class SplineGUI
    {
        public static void SplineIndexField(UnityEngine.Rect rect, SerializedProperty property, UnityEngine.GUIContent label, int splineCount);
        public static void SplineIndexField<T>(UnityEngine.Rect rect, SerializedProperty property, UnityEngine.GUIContent label, T container) where T : UnityEngine.Splines.ISplineContainer;
        public static int SplineIndexPopup(UnityEngine.Rect rect, string label, int index, int splineCount);
    }

    public static class SplineGUILayout
    {
        public static bool EmbeddedSplineDataField(UnityEngine.Splines.SplineContainer container, int index, UnityEngine.Splines.EmbeddedSplineDataType type, string key);
        public static bool EmbeddedSplineDataField(UnityEngine.GUIContent label, UnityEngine.Splines.SplineContainer container, int index, UnityEngine.Splines.EmbeddedSplineDataType type, string key);
        public static void SplineIndexField(SerializedProperty property, int splineCount);
        public static void SplineIndexField<T>(SerializedProperty property, T container) where T : UnityEngine.Splines.ISplineContainer;
        public static int SplineIndexPopup(string label, int index, int splineCount);
        public static int SplineIndexPopup<T>(string label, int index, T container) where T : UnityEngine.Splines.ISplineContainer;
    }

    public static class SplineHandles
    {
        public static void DoCurve(UnityEngine.Splines.BezierCurve curve);
        public static void DoCurve(int controlID, UnityEngine.Splines.BezierCurve curve);
        public static void DoSpline<T>(T spline) where T : UnityEngine.Splines.ISpline;
        public static void DoSpline<T>(int controlID, T spline) where T : UnityEngine.Splines.ISpline;
    }

    [CustomPropertyDrawer(typeof(UnityEngine.Splines.SplineIndexAttribute))] public class SplineIndexPropertyDrawer : PropertyDrawer
    {
        public SplineIndexPropertyDrawer() {}
        public override float GetPropertyHeight(SerializedProperty property, UnityEngine.GUIContent label);
        public override void OnGUI(UnityEngine.Rect position, SerializedProperty property, UnityEngine.GUIContent label);
    }

    [CustomPropertyDrawer(typeof(UnityEngine.Splines.SplineInfo))] public class SplineInfoPropertyDrawer : PropertyDrawer
    {
        public SplineInfoPropertyDrawer() {}
        public override float GetPropertyHeight(SerializedProperty property, UnityEngine.GUIContent label);
        public override void OnGUI(UnityEngine.Rect position, SerializedProperty property, UnityEngine.GUIContent label);
    }

    public class SplineMeshHandle<T> : System.IDisposable where T : UnityEngine.Splines.ISpline
    {
        public UnityEngine.Material material { get; set; }
        public SplineMeshHandle() {}
        public SplineMeshHandle(UnityEngine.Material material) {}
        public void Dispose();
        public void Do(T spline, float size, int resolution = 10);
        public void Do(int controlID, T spline, float size, int resolution = 10);
        public void Do(T spline, float size, UnityEngine.Color color, int resolution = 10);
        public void Do(int controlID, T spline, float size, UnityEngine.Color color, int resolution = 10);
    }

    [UnityEditor.EditorTools.EditorToolContext(@"Spline", typeof(UnityEngine.Splines.ISplineContainer))] [UnityEngine.Icon(@"Packages/com.unity.splines/Editor/Resources/Icons/SplineContext.png")] public sealed class SplineToolContext : UnityEditor.EditorTools.EditorToolContext
    {
        public SplineToolContext() {}
        protected override System.Type GetEditorToolType(Tool tool);
        public override void OnActivated();
        public override void OnToolGUI(EditorWindow window);
        public override void OnWillBeDeactivated();
    }
}
